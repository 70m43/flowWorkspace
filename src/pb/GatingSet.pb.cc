// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GatingSet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GatingSet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* gate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gate_reflection_ = NULL;
const ::google::protobuf::Descriptor* POPSTATS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  POPSTATS_reflection_ = NULL;
const ::google::protobuf::Descriptor* POPINDICES_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  POPINDICES_reflection_ = NULL;
const ::google::protobuf::Descriptor* nodeProperties_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  nodeProperties_reflection_ = NULL;
const ::google::protobuf::Descriptor* treeNodes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  treeNodes_reflection_ = NULL;
const ::google::protobuf::Descriptor* populationTree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  populationTree_reflection_ = NULL;
const ::google::protobuf::Descriptor* GatingHierarchy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GatingHierarchy_reflection_ = NULL;
const ::google::protobuf::Descriptor* ghPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ghPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* GatingSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GatingSet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ind_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GatingSet_2eproto() {
  protobuf_AddDesc_GatingSet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GatingSet.proto");
  GOOGLE_CHECK(file != NULL);
  gate_descriptor_ = file->message_type(0);
  static const int gate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate, neg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate, istransformed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate, isgained_),
  };
  gate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gate_descriptor_,
      gate::default_instance_,
      gate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gate));
  POPSTATS_descriptor_ = file->message_type(1);
  static const int POPSTATS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POPSTATS, stattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POPSTATS, statval_),
  };
  POPSTATS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      POPSTATS_descriptor_,
      POPSTATS::default_instance_,
      POPSTATS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POPSTATS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POPSTATS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(POPSTATS));
  POPINDICES_descriptor_ = file->message_type(2);
  static const int POPINDICES_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POPINDICES, nevents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POPINDICES, indtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POPINDICES, iind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POPINDICES, bind_),
  };
  POPINDICES_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      POPINDICES_descriptor_,
      POPINDICES::default_instance_,
      POPINDICES_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POPINDICES, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POPINDICES, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(POPINDICES));
  nodeProperties_descriptor_ = file->message_type(3);
  static const int nodeProperties_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nodeProperties, thisname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nodeProperties, fjstats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nodeProperties, fcstats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nodeProperties, hidden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nodeProperties, indices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nodeProperties, thisgate_),
  };
  nodeProperties_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      nodeProperties_descriptor_,
      nodeProperties::default_instance_,
      nodeProperties_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nodeProperties, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nodeProperties, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(nodeProperties));
  treeNodes_descriptor_ = file->message_type(4);
  static const int treeNodes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treeNodes, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treeNodes, parent_),
  };
  treeNodes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      treeNodes_descriptor_,
      treeNodes::default_instance_,
      treeNodes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treeNodes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treeNodes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(treeNodes));
  populationTree_descriptor_ = file->message_type(5);
  static const int populationTree_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(populationTree, node_),
  };
  populationTree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      populationTree_descriptor_,
      populationTree::default_instance_,
      populationTree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(populationTree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(populationTree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(populationTree));
  GatingHierarchy_descriptor_ = file->message_type(6);
  static const int GatingHierarchy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatingHierarchy, tree_),
  };
  GatingHierarchy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GatingHierarchy_descriptor_,
      GatingHierarchy::default_instance_,
      GatingHierarchy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatingHierarchy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatingHierarchy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GatingHierarchy));
  ghPair_descriptor_ = file->message_type(7);
  static const int ghPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ghPair, gh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ghPair, samplename_),
  };
  ghPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ghPair_descriptor_,
      ghPair::default_instance_,
      ghPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ghPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ghPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ghPair));
  GatingSet_descriptor_ = file->message_type(8);
  static const int GatingSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatingSet, ghs_),
  };
  GatingSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GatingSet_descriptor_,
      GatingSet::default_instance_,
      GatingSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatingSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatingSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GatingSet));
  ind_type_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GatingSet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gate_descriptor_, &gate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    POPSTATS_descriptor_, &POPSTATS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    POPINDICES_descriptor_, &POPINDICES::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    nodeProperties_descriptor_, &nodeProperties::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    treeNodes_descriptor_, &treeNodes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    populationTree_descriptor_, &populationTree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GatingHierarchy_descriptor_, &GatingHierarchy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ghPair_descriptor_, &ghPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GatingSet_descriptor_, &GatingSet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GatingSet_2eproto() {
  delete gate::default_instance_;
  delete gate_reflection_;
  delete POPSTATS::default_instance_;
  delete POPSTATS_reflection_;
  delete POPINDICES::default_instance_;
  delete POPINDICES_reflection_;
  delete nodeProperties::default_instance_;
  delete nodeProperties_reflection_;
  delete treeNodes::default_instance_;
  delete treeNodes_reflection_;
  delete populationTree::default_instance_;
  delete populationTree_reflection_;
  delete GatingHierarchy::default_instance_;
  delete GatingHierarchy_reflection_;
  delete ghPair::default_instance_;
  delete ghPair_reflection_;
  delete GatingSet::default_instance_;
  delete GatingSet_reflection_;
}

void protobuf_AddDesc_GatingSet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017GatingSet.proto\022\002pb\"<\n\004gate\022\013\n\003neg\030\001 \002"
    "(\010\022\025\n\risTransformed\030\002 \002(\010\022\020\n\010isGained\030\003 "
    "\002(\010\"-\n\010POPSTATS\022\020\n\010statType\030\001 \002(\t\022\017\n\007sta"
    "tVal\030\002 \002(\002\"X\n\nPOPINDICES\022\017\n\007nEvents\030\001 \002("
    "\007\022\035\n\007indtype\030\002 \002(\0162\014.pb.ind_type\022\014\n\004iInd"
    "\030\003 \003(\007\022\014\n\004bInd\030\004 \003(\010\"\255\001\n\016nodeProperties\022"
    "\020\n\010thisName\030\001 \002(\t\022\035\n\007fjStats\030\002 \003(\0132\014.pb."
    "POPSTATS\022\035\n\007fcStats\030\003 \003(\0132\014.pb.POPSTATS\022"
    "\016\n\006hidden\030\004 \002(\010\022\037\n\007indices\030\005 \002(\0132\016.pb.PO"
    "PINDICES\022\032\n\010thisGate\030\006 \002(\0132\010.pb.gate\"=\n\t"
    "treeNodes\022 \n\004node\030\001 \002(\0132\022.pb.nodePropert"
    "ies\022\016\n\006parent\030\002 \002(\007\"-\n\016populationTree\022\033\n"
    "\004node\030\001 \003(\0132\r.pb.treeNodes\"3\n\017GatingHier"
    "archy\022 \n\004tree\030\002 \002(\0132\022.pb.populationTree\""
    "=\n\006ghPair\022\037\n\002gh\030\001 \002(\0132\023.pb.GatingHierarc"
    "hy\022\022\n\nsampleName\030\002 \002(\t\"$\n\tGatingSet\022\027\n\003g"
    "hs\030\001 \003(\0132\n.pb.ghPair*\'\n\010ind_type\022\010\n\004BOOL"
    "\020\000\022\007\n\003INT\020\001\022\010\n\004ROOT\020\002", 701);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GatingSet.proto", &protobuf_RegisterTypes);
  gate::default_instance_ = new gate();
  POPSTATS::default_instance_ = new POPSTATS();
  POPINDICES::default_instance_ = new POPINDICES();
  nodeProperties::default_instance_ = new nodeProperties();
  treeNodes::default_instance_ = new treeNodes();
  populationTree::default_instance_ = new populationTree();
  GatingHierarchy::default_instance_ = new GatingHierarchy();
  ghPair::default_instance_ = new ghPair();
  GatingSet::default_instance_ = new GatingSet();
  gate::default_instance_->InitAsDefaultInstance();
  POPSTATS::default_instance_->InitAsDefaultInstance();
  POPINDICES::default_instance_->InitAsDefaultInstance();
  nodeProperties::default_instance_->InitAsDefaultInstance();
  treeNodes::default_instance_->InitAsDefaultInstance();
  populationTree::default_instance_->InitAsDefaultInstance();
  GatingHierarchy::default_instance_->InitAsDefaultInstance();
  ghPair::default_instance_->InitAsDefaultInstance();
  GatingSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GatingSet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GatingSet_2eproto {
  StaticDescriptorInitializer_GatingSet_2eproto() {
    protobuf_AddDesc_GatingSet_2eproto();
  }
} static_descriptor_initializer_GatingSet_2eproto_;
const ::google::protobuf::EnumDescriptor* ind_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ind_type_descriptor_;
}
bool ind_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int gate::kNegFieldNumber;
const int gate::kIsTransformedFieldNumber;
const int gate::kIsGainedFieldNumber;
#endif  // !_MSC_VER

gate::gate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.gate)
}

void gate::InitAsDefaultInstance() {
}

gate::gate(const gate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.gate)
}

void gate::SharedCtor() {
  _cached_size_ = 0;
  neg_ = false;
  istransformed_ = false;
  isgained_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gate::~gate() {
  // @@protoc_insertion_point(destructor:pb.gate)
  SharedDtor();
}

void gate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gate_descriptor_;
}

const gate& gate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

gate* gate::default_instance_ = NULL;

gate* gate::New() const {
  return new gate;
}

void gate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<gate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(neg_, isgained_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.gate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool neg = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &neg_)));
          set_has_neg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isTransformed;
        break;
      }

      // required bool isTransformed = 2;
      case 2: {
        if (tag == 16) {
         parse_isTransformed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istransformed_)));
          set_has_istransformed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isGained;
        break;
      }

      // required bool isGained = 3;
      case 3: {
        if (tag == 24) {
         parse_isGained:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgained_)));
          set_has_isgained();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.gate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.gate)
  return false;
#undef DO_
}

void gate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.gate)
  // required bool neg = 1;
  if (has_neg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->neg(), output);
  }

  // required bool isTransformed = 2;
  if (has_istransformed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->istransformed(), output);
  }

  // required bool isGained = 3;
  if (has_isgained()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isgained(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.gate)
}

::google::protobuf::uint8* gate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.gate)
  // required bool neg = 1;
  if (has_neg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->neg(), target);
  }

  // required bool isTransformed = 2;
  if (has_istransformed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->istransformed(), target);
  }

  // required bool isGained = 3;
  if (has_isgained()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isgained(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.gate)
  return target;
}

int gate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool neg = 1;
    if (has_neg()) {
      total_size += 1 + 1;
    }

    // required bool isTransformed = 2;
    if (has_istransformed()) {
      total_size += 1 + 1;
    }

    // required bool isGained = 3;
    if (has_isgained()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gate::MergeFrom(const gate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_neg()) {
      set_neg(from.neg());
    }
    if (from.has_istransformed()) {
      set_istransformed(from.istransformed());
    }
    if (from.has_isgained()) {
      set_isgained(from.isgained());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gate::CopyFrom(const gate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void gate::Swap(gate* other) {
  if (other != this) {
    std::swap(neg_, other->neg_);
    std::swap(istransformed_, other->istransformed_);
    std::swap(isgained_, other->isgained_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gate_descriptor_;
  metadata.reflection = gate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int POPSTATS::kStatTypeFieldNumber;
const int POPSTATS::kStatValFieldNumber;
#endif  // !_MSC_VER

POPSTATS::POPSTATS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.POPSTATS)
}

void POPSTATS::InitAsDefaultInstance() {
}

POPSTATS::POPSTATS(const POPSTATS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.POPSTATS)
}

void POPSTATS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stattype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

POPSTATS::~POPSTATS() {
  // @@protoc_insertion_point(destructor:pb.POPSTATS)
  SharedDtor();
}

void POPSTATS::SharedDtor() {
  if (stattype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stattype_;
  }
  if (this != default_instance_) {
  }
}

void POPSTATS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* POPSTATS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return POPSTATS_descriptor_;
}

const POPSTATS& POPSTATS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

POPSTATS* POPSTATS::default_instance_ = NULL;

POPSTATS* POPSTATS::New() const {
  return new POPSTATS;
}

void POPSTATS::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_stattype()) {
      if (stattype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stattype_->clear();
      }
    }
    statval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool POPSTATS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.POPSTATS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string statType = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stattype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stattype().data(), this->stattype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stattype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_statVal;
        break;
      }

      // required float statVal = 2;
      case 2: {
        if (tag == 21) {
         parse_statVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &statval_)));
          set_has_statval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.POPSTATS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.POPSTATS)
  return false;
#undef DO_
}

void POPSTATS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.POPSTATS)
  // required string statType = 1;
  if (has_stattype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stattype().data(), this->stattype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stattype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stattype(), output);
  }

  // required float statVal = 2;
  if (has_statval()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->statval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.POPSTATS)
}

::google::protobuf::uint8* POPSTATS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.POPSTATS)
  // required string statType = 1;
  if (has_stattype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stattype().data(), this->stattype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stattype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stattype(), target);
  }

  // required float statVal = 2;
  if (has_statval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->statval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.POPSTATS)
  return target;
}

int POPSTATS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string statType = 1;
    if (has_stattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stattype());
    }

    // required float statVal = 2;
    if (has_statval()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void POPSTATS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const POPSTATS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const POPSTATS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void POPSTATS::MergeFrom(const POPSTATS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stattype()) {
      set_stattype(from.stattype());
    }
    if (from.has_statval()) {
      set_statval(from.statval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void POPSTATS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void POPSTATS::CopyFrom(const POPSTATS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool POPSTATS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void POPSTATS::Swap(POPSTATS* other) {
  if (other != this) {
    std::swap(stattype_, other->stattype_);
    std::swap(statval_, other->statval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata POPSTATS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = POPSTATS_descriptor_;
  metadata.reflection = POPSTATS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int POPINDICES::kNEventsFieldNumber;
const int POPINDICES::kIndtypeFieldNumber;
const int POPINDICES::kIIndFieldNumber;
const int POPINDICES::kBIndFieldNumber;
#endif  // !_MSC_VER

POPINDICES::POPINDICES()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.POPINDICES)
}

void POPINDICES::InitAsDefaultInstance() {
}

POPINDICES::POPINDICES(const POPINDICES& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.POPINDICES)
}

void POPINDICES::SharedCtor() {
  _cached_size_ = 0;
  nevents_ = 0u;
  indtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

POPINDICES::~POPINDICES() {
  // @@protoc_insertion_point(destructor:pb.POPINDICES)
  SharedDtor();
}

void POPINDICES::SharedDtor() {
  if (this != default_instance_) {
  }
}

void POPINDICES::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* POPINDICES::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return POPINDICES_descriptor_;
}

const POPINDICES& POPINDICES::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

POPINDICES* POPINDICES::default_instance_ = NULL;

POPINDICES* POPINDICES::New() const {
  return new POPINDICES;
}

void POPINDICES::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<POPINDICES*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(nevents_, indtype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  iind_.Clear();
  bind_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool POPINDICES::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.POPINDICES)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 nEvents = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &nevents_)));
          set_has_nevents();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_indtype;
        break;
      }

      // required .pb.ind_type indtype = 2;
      case 2: {
        if (tag == 16) {
         parse_indtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ind_type_IsValid(value)) {
            set_indtype(static_cast< ::pb::ind_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_iInd;
        break;
      }

      // repeated fixed32 iInd = 3;
      case 3: {
        if (tag == 29) {
         parse_iInd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 29, input, this->mutable_iind())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_iind())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_iInd;
        if (input->ExpectTag(32)) goto parse_bInd;
        break;
      }

      // repeated bool bInd = 4;
      case 4: {
        if (tag == 32) {
         parse_bInd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 32, input, this->mutable_bind())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_bind())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bInd;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.POPINDICES)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.POPINDICES)
  return false;
#undef DO_
}

void POPINDICES::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.POPINDICES)
  // required fixed32 nEvents = 1;
  if (has_nevents()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->nevents(), output);
  }

  // required .pb.ind_type indtype = 2;
  if (has_indtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->indtype(), output);
  }

  // repeated fixed32 iInd = 3;
  for (int i = 0; i < this->iind_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      3, this->iind(i), output);
  }

  // repeated bool bInd = 4;
  for (int i = 0; i < this->bind_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      4, this->bind(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.POPINDICES)
}

::google::protobuf::uint8* POPINDICES::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.POPINDICES)
  // required fixed32 nEvents = 1;
  if (has_nevents()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->nevents(), target);
  }

  // required .pb.ind_type indtype = 2;
  if (has_indtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->indtype(), target);
  }

  // repeated fixed32 iInd = 3;
  for (int i = 0; i < this->iind_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(3, this->iind(i), target);
  }

  // repeated bool bInd = 4;
  for (int i = 0; i < this->bind_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(4, this->bind(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.POPINDICES)
  return target;
}

int POPINDICES::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 nEvents = 1;
    if (has_nevents()) {
      total_size += 1 + 4;
    }

    // required .pb.ind_type indtype = 2;
    if (has_indtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->indtype());
    }

  }
  // repeated fixed32 iInd = 3;
  {
    int data_size = 0;
    data_size = 4 * this->iind_size();
    total_size += 1 * this->iind_size() + data_size;
  }

  // repeated bool bInd = 4;
  {
    int data_size = 0;
    data_size = 1 * this->bind_size();
    total_size += 1 * this->bind_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void POPINDICES::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const POPINDICES* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const POPINDICES*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void POPINDICES::MergeFrom(const POPINDICES& from) {
  GOOGLE_CHECK_NE(&from, this);
  iind_.MergeFrom(from.iind_);
  bind_.MergeFrom(from.bind_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nevents()) {
      set_nevents(from.nevents());
    }
    if (from.has_indtype()) {
      set_indtype(from.indtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void POPINDICES::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void POPINDICES::CopyFrom(const POPINDICES& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool POPINDICES::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void POPINDICES::Swap(POPINDICES* other) {
  if (other != this) {
    std::swap(nevents_, other->nevents_);
    std::swap(indtype_, other->indtype_);
    iind_.Swap(&other->iind_);
    bind_.Swap(&other->bind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata POPINDICES::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = POPINDICES_descriptor_;
  metadata.reflection = POPINDICES_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nodeProperties::kThisNameFieldNumber;
const int nodeProperties::kFjStatsFieldNumber;
const int nodeProperties::kFcStatsFieldNumber;
const int nodeProperties::kHiddenFieldNumber;
const int nodeProperties::kIndicesFieldNumber;
const int nodeProperties::kThisGateFieldNumber;
#endif  // !_MSC_VER

nodeProperties::nodeProperties()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.nodeProperties)
}

void nodeProperties::InitAsDefaultInstance() {
  indices_ = const_cast< ::pb::POPINDICES*>(&::pb::POPINDICES::default_instance());
  thisgate_ = const_cast< ::pb::gate*>(&::pb::gate::default_instance());
}

nodeProperties::nodeProperties(const nodeProperties& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.nodeProperties)
}

void nodeProperties::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  thisname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hidden_ = false;
  indices_ = NULL;
  thisgate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nodeProperties::~nodeProperties() {
  // @@protoc_insertion_point(destructor:pb.nodeProperties)
  SharedDtor();
}

void nodeProperties::SharedDtor() {
  if (thisname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thisname_;
  }
  if (this != default_instance_) {
    delete indices_;
    delete thisgate_;
  }
}

void nodeProperties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nodeProperties::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nodeProperties_descriptor_;
}

const nodeProperties& nodeProperties::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

nodeProperties* nodeProperties::default_instance_ = NULL;

nodeProperties* nodeProperties::New() const {
  return new nodeProperties;
}

void nodeProperties::Clear() {
  if (_has_bits_[0 / 32] & 57) {
    if (has_thisname()) {
      if (thisname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        thisname_->clear();
      }
    }
    hidden_ = false;
    if (has_indices()) {
      if (indices_ != NULL) indices_->::pb::POPINDICES::Clear();
    }
    if (has_thisgate()) {
      if (thisgate_ != NULL) thisgate_->::pb::gate::Clear();
    }
  }
  fjstats_.Clear();
  fcstats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nodeProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.nodeProperties)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string thisName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thisname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thisname().data(), this->thisname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "thisname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fjStats;
        break;
      }

      // repeated .pb.POPSTATS fjStats = 2;
      case 2: {
        if (tag == 18) {
         parse_fjStats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fjstats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fjStats;
        if (input->ExpectTag(26)) goto parse_fcStats;
        break;
      }

      // repeated .pb.POPSTATS fcStats = 3;
      case 3: {
        if (tag == 26) {
         parse_fcStats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fcstats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fcStats;
        if (input->ExpectTag(32)) goto parse_hidden;
        break;
      }

      // required bool hidden = 4;
      case 4: {
        if (tag == 32) {
         parse_hidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hidden_)));
          set_has_hidden();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_indices;
        break;
      }

      // required .pb.POPINDICES indices = 5;
      case 5: {
        if (tag == 42) {
         parse_indices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_indices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_thisGate;
        break;
      }

      // required .pb.gate thisGate = 6;
      case 6: {
        if (tag == 50) {
         parse_thisGate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thisgate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.nodeProperties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.nodeProperties)
  return false;
#undef DO_
}

void nodeProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.nodeProperties)
  // required string thisName = 1;
  if (has_thisname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thisname().data(), this->thisname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thisname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->thisname(), output);
  }

  // repeated .pb.POPSTATS fjStats = 2;
  for (int i = 0; i < this->fjstats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fjstats(i), output);
  }

  // repeated .pb.POPSTATS fcStats = 3;
  for (int i = 0; i < this->fcstats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fcstats(i), output);
  }

  // required bool hidden = 4;
  if (has_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->hidden(), output);
  }

  // required .pb.POPINDICES indices = 5;
  if (has_indices()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->indices(), output);
  }

  // required .pb.gate thisGate = 6;
  if (has_thisgate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->thisgate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.nodeProperties)
}

::google::protobuf::uint8* nodeProperties::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.nodeProperties)
  // required string thisName = 1;
  if (has_thisname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thisname().data(), this->thisname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thisname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->thisname(), target);
  }

  // repeated .pb.POPSTATS fjStats = 2;
  for (int i = 0; i < this->fjstats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fjstats(i), target);
  }

  // repeated .pb.POPSTATS fcStats = 3;
  for (int i = 0; i < this->fcstats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fcstats(i), target);
  }

  // required bool hidden = 4;
  if (has_hidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->hidden(), target);
  }

  // required .pb.POPINDICES indices = 5;
  if (has_indices()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->indices(), target);
  }

  // required .pb.gate thisGate = 6;
  if (has_thisgate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->thisgate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.nodeProperties)
  return target;
}

int nodeProperties::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string thisName = 1;
    if (has_thisname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thisname());
    }

    // required bool hidden = 4;
    if (has_hidden()) {
      total_size += 1 + 1;
    }

    // required .pb.POPINDICES indices = 5;
    if (has_indices()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->indices());
    }

    // required .pb.gate thisGate = 6;
    if (has_thisgate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thisgate());
    }

  }
  // repeated .pb.POPSTATS fjStats = 2;
  total_size += 1 * this->fjstats_size();
  for (int i = 0; i < this->fjstats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fjstats(i));
  }

  // repeated .pb.POPSTATS fcStats = 3;
  total_size += 1 * this->fcstats_size();
  for (int i = 0; i < this->fcstats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fcstats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nodeProperties::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nodeProperties* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const nodeProperties*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nodeProperties::MergeFrom(const nodeProperties& from) {
  GOOGLE_CHECK_NE(&from, this);
  fjstats_.MergeFrom(from.fjstats_);
  fcstats_.MergeFrom(from.fcstats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_thisname()) {
      set_thisname(from.thisname());
    }
    if (from.has_hidden()) {
      set_hidden(from.hidden());
    }
    if (from.has_indices()) {
      mutable_indices()->::pb::POPINDICES::MergeFrom(from.indices());
    }
    if (from.has_thisgate()) {
      mutable_thisgate()->::pb::gate::MergeFrom(from.thisgate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nodeProperties::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nodeProperties::CopyFrom(const nodeProperties& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nodeProperties::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000039) != 0x00000039) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->fjstats())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fcstats())) return false;
  if (has_indices()) {
    if (!this->indices().IsInitialized()) return false;
  }
  if (has_thisgate()) {
    if (!this->thisgate().IsInitialized()) return false;
  }
  return true;
}

void nodeProperties::Swap(nodeProperties* other) {
  if (other != this) {
    std::swap(thisname_, other->thisname_);
    fjstats_.Swap(&other->fjstats_);
    fcstats_.Swap(&other->fcstats_);
    std::swap(hidden_, other->hidden_);
    std::swap(indices_, other->indices_);
    std::swap(thisgate_, other->thisgate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata nodeProperties::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = nodeProperties_descriptor_;
  metadata.reflection = nodeProperties_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int treeNodes::kNodeFieldNumber;
const int treeNodes::kParentFieldNumber;
#endif  // !_MSC_VER

treeNodes::treeNodes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.treeNodes)
}

void treeNodes::InitAsDefaultInstance() {
  node_ = const_cast< ::pb::nodeProperties*>(&::pb::nodeProperties::default_instance());
}

treeNodes::treeNodes(const treeNodes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.treeNodes)
}

void treeNodes::SharedCtor() {
  _cached_size_ = 0;
  node_ = NULL;
  parent_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

treeNodes::~treeNodes() {
  // @@protoc_insertion_point(destructor:pb.treeNodes)
  SharedDtor();
}

void treeNodes::SharedDtor() {
  if (this != default_instance_) {
    delete node_;
  }
}

void treeNodes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* treeNodes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return treeNodes_descriptor_;
}

const treeNodes& treeNodes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

treeNodes* treeNodes::default_instance_ = NULL;

treeNodes* treeNodes::New() const {
  return new treeNodes;
}

void treeNodes::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_node()) {
      if (node_ != NULL) node_->::pb::nodeProperties::Clear();
    }
    parent_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool treeNodes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.treeNodes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.nodeProperties node = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_parent;
        break;
      }

      // required fixed32 parent = 2;
      case 2: {
        if (tag == 21) {
         parse_parent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &parent_)));
          set_has_parent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.treeNodes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.treeNodes)
  return false;
#undef DO_
}

void treeNodes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.treeNodes)
  // required .pb.nodeProperties node = 1;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(), output);
  }

  // required fixed32 parent = 2;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->parent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.treeNodes)
}

::google::protobuf::uint8* treeNodes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.treeNodes)
  // required .pb.nodeProperties node = 1;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node(), target);
  }

  // required fixed32 parent = 2;
  if (has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->parent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.treeNodes)
  return target;
}

int treeNodes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.nodeProperties node = 1;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node());
    }

    // required fixed32 parent = 2;
    if (has_parent()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void treeNodes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const treeNodes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const treeNodes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void treeNodes::MergeFrom(const treeNodes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node()) {
      mutable_node()->::pb::nodeProperties::MergeFrom(from.node());
    }
    if (from.has_parent()) {
      set_parent(from.parent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void treeNodes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void treeNodes::CopyFrom(const treeNodes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool treeNodes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_node()) {
    if (!this->node().IsInitialized()) return false;
  }
  return true;
}

void treeNodes::Swap(treeNodes* other) {
  if (other != this) {
    std::swap(node_, other->node_);
    std::swap(parent_, other->parent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata treeNodes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = treeNodes_descriptor_;
  metadata.reflection = treeNodes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int populationTree::kNodeFieldNumber;
#endif  // !_MSC_VER

populationTree::populationTree()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.populationTree)
}

void populationTree::InitAsDefaultInstance() {
}

populationTree::populationTree(const populationTree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.populationTree)
}

void populationTree::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

populationTree::~populationTree() {
  // @@protoc_insertion_point(destructor:pb.populationTree)
  SharedDtor();
}

void populationTree::SharedDtor() {
  if (this != default_instance_) {
  }
}

void populationTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* populationTree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return populationTree_descriptor_;
}

const populationTree& populationTree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

populationTree* populationTree::default_instance_ = NULL;

populationTree* populationTree::New() const {
  return new populationTree;
}

void populationTree::Clear() {
  node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool populationTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.populationTree)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.treeNodes node = 1;
      case 1: {
        if (tag == 10) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_node;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.populationTree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.populationTree)
  return false;
#undef DO_
}

void populationTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.populationTree)
  // repeated .pb.treeNodes node = 1;
  for (int i = 0; i < this->node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.populationTree)
}

::google::protobuf::uint8* populationTree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.populationTree)
  // repeated .pb.treeNodes node = 1;
  for (int i = 0; i < this->node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.populationTree)
  return target;
}

int populationTree::ByteSize() const {
  int total_size = 0;

  // repeated .pb.treeNodes node = 1;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void populationTree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const populationTree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const populationTree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void populationTree::MergeFrom(const populationTree& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_.MergeFrom(from.node_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void populationTree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void populationTree::CopyFrom(const populationTree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool populationTree::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->node())) return false;
  return true;
}

void populationTree::Swap(populationTree* other) {
  if (other != this) {
    node_.Swap(&other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata populationTree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = populationTree_descriptor_;
  metadata.reflection = populationTree_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GatingHierarchy::kTreeFieldNumber;
#endif  // !_MSC_VER

GatingHierarchy::GatingHierarchy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.GatingHierarchy)
}

void GatingHierarchy::InitAsDefaultInstance() {
  tree_ = const_cast< ::pb::populationTree*>(&::pb::populationTree::default_instance());
}

GatingHierarchy::GatingHierarchy(const GatingHierarchy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.GatingHierarchy)
}

void GatingHierarchy::SharedCtor() {
  _cached_size_ = 0;
  tree_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GatingHierarchy::~GatingHierarchy() {
  // @@protoc_insertion_point(destructor:pb.GatingHierarchy)
  SharedDtor();
}

void GatingHierarchy::SharedDtor() {
  if (this != default_instance_) {
    delete tree_;
  }
}

void GatingHierarchy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GatingHierarchy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GatingHierarchy_descriptor_;
}

const GatingHierarchy& GatingHierarchy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

GatingHierarchy* GatingHierarchy::default_instance_ = NULL;

GatingHierarchy* GatingHierarchy::New() const {
  return new GatingHierarchy;
}

void GatingHierarchy::Clear() {
  if (has_tree()) {
    if (tree_ != NULL) tree_->::pb::populationTree::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GatingHierarchy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.GatingHierarchy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.populationTree tree = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tree()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.GatingHierarchy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.GatingHierarchy)
  return false;
#undef DO_
}

void GatingHierarchy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.GatingHierarchy)
  // required .pb.populationTree tree = 2;
  if (has_tree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.GatingHierarchy)
}

::google::protobuf::uint8* GatingHierarchy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GatingHierarchy)
  // required .pb.populationTree tree = 2;
  if (has_tree()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GatingHierarchy)
  return target;
}

int GatingHierarchy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.populationTree tree = 2;
    if (has_tree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tree());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GatingHierarchy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GatingHierarchy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GatingHierarchy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GatingHierarchy::MergeFrom(const GatingHierarchy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tree()) {
      mutable_tree()->::pb::populationTree::MergeFrom(from.tree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GatingHierarchy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatingHierarchy::CopyFrom(const GatingHierarchy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatingHierarchy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_tree()) {
    if (!this->tree().IsInitialized()) return false;
  }
  return true;
}

void GatingHierarchy::Swap(GatingHierarchy* other) {
  if (other != this) {
    std::swap(tree_, other->tree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GatingHierarchy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GatingHierarchy_descriptor_;
  metadata.reflection = GatingHierarchy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ghPair::kGhFieldNumber;
const int ghPair::kSampleNameFieldNumber;
#endif  // !_MSC_VER

ghPair::ghPair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ghPair)
}

void ghPair::InitAsDefaultInstance() {
  gh_ = const_cast< ::pb::GatingHierarchy*>(&::pb::GatingHierarchy::default_instance());
}

ghPair::ghPair(const ghPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.ghPair)
}

void ghPair::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gh_ = NULL;
  samplename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ghPair::~ghPair() {
  // @@protoc_insertion_point(destructor:pb.ghPair)
  SharedDtor();
}

void ghPair::SharedDtor() {
  if (samplename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete samplename_;
  }
  if (this != default_instance_) {
    delete gh_;
  }
}

void ghPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ghPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ghPair_descriptor_;
}

const ghPair& ghPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

ghPair* ghPair::default_instance_ = NULL;

ghPair* ghPair::New() const {
  return new ghPair;
}

void ghPair::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_gh()) {
      if (gh_ != NULL) gh_->::pb::GatingHierarchy::Clear();
    }
    if (has_samplename()) {
      if (samplename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        samplename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ghPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ghPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.GatingHierarchy gh = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sampleName;
        break;
      }

      // required string sampleName = 2;
      case 2: {
        if (tag == 18) {
         parse_sampleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_samplename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->samplename().data(), this->samplename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "samplename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ghPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ghPair)
  return false;
#undef DO_
}

void ghPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ghPair)
  // required .pb.GatingHierarchy gh = 1;
  if (has_gh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gh(), output);
  }

  // required string sampleName = 2;
  if (has_samplename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->samplename().data(), this->samplename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "samplename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->samplename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ghPair)
}

::google::protobuf::uint8* ghPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ghPair)
  // required .pb.GatingHierarchy gh = 1;
  if (has_gh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gh(), target);
  }

  // required string sampleName = 2;
  if (has_samplename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->samplename().data(), this->samplename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "samplename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->samplename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ghPair)
  return target;
}

int ghPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.GatingHierarchy gh = 1;
    if (has_gh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gh());
    }

    // required string sampleName = 2;
    if (has_samplename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->samplename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ghPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ghPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ghPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ghPair::MergeFrom(const ghPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gh()) {
      mutable_gh()->::pb::GatingHierarchy::MergeFrom(from.gh());
    }
    if (from.has_samplename()) {
      set_samplename(from.samplename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ghPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ghPair::CopyFrom(const ghPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ghPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_gh()) {
    if (!this->gh().IsInitialized()) return false;
  }
  return true;
}

void ghPair::Swap(ghPair* other) {
  if (other != this) {
    std::swap(gh_, other->gh_);
    std::swap(samplename_, other->samplename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ghPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ghPair_descriptor_;
  metadata.reflection = ghPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GatingSet::kGhsFieldNumber;
#endif  // !_MSC_VER

GatingSet::GatingSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.GatingSet)
}

void GatingSet::InitAsDefaultInstance() {
}

GatingSet::GatingSet(const GatingSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.GatingSet)
}

void GatingSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GatingSet::~GatingSet() {
  // @@protoc_insertion_point(destructor:pb.GatingSet)
  SharedDtor();
}

void GatingSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GatingSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GatingSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GatingSet_descriptor_;
}

const GatingSet& GatingSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

GatingSet* GatingSet::default_instance_ = NULL;

GatingSet* GatingSet::New() const {
  return new GatingSet;
}

void GatingSet::Clear() {
  ghs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GatingSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.GatingSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.ghPair ghs = 1;
      case 1: {
        if (tag == 10) {
         parse_ghs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ghs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ghs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.GatingSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.GatingSet)
  return false;
#undef DO_
}

void GatingSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.GatingSet)
  // repeated .pb.ghPair ghs = 1;
  for (int i = 0; i < this->ghs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ghs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.GatingSet)
}

::google::protobuf::uint8* GatingSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GatingSet)
  // repeated .pb.ghPair ghs = 1;
  for (int i = 0; i < this->ghs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ghs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GatingSet)
  return target;
}

int GatingSet::ByteSize() const {
  int total_size = 0;

  // repeated .pb.ghPair ghs = 1;
  total_size += 1 * this->ghs_size();
  for (int i = 0; i < this->ghs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ghs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GatingSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GatingSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GatingSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GatingSet::MergeFrom(const GatingSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  ghs_.MergeFrom(from.ghs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GatingSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatingSet::CopyFrom(const GatingSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatingSet::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->ghs())) return false;
  return true;
}

void GatingSet::Swap(GatingSet* other) {
  if (other != this) {
    ghs_.Swap(&other->ghs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GatingSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GatingSet_descriptor_;
  metadata.reflection = GatingSet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

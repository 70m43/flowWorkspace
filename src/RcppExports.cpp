// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/flowWorkspace.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// getPopCounts
Rcpp::List getPopCounts(Rcpp::XPtr<GatingSet> gsPtr, StringVec subpopulation, bool flowJo, bool isFullPath);
RcppExport SEXP _flowWorkspace_getPopCounts(SEXP gsPtrSEXP, SEXP subpopulationSEXP, SEXP flowJoSEXP, SEXP isFullPathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GatingSet> >::type gsPtr(gsPtrSEXP);
    Rcpp::traits::input_parameter< StringVec >::type subpopulation(subpopulationSEXP);
    Rcpp::traits::input_parameter< bool >::type flowJo(flowJoSEXP);
    Rcpp::traits::input_parameter< bool >::type isFullPath(isFullPathSEXP);
    rcpp_result_gen = Rcpp::wrap(getPopCounts(gsPtr, subpopulation, flowJo, isFullPath));
    return rcpp_result_gen;
END_RCPP
}
// getSplineCoefs
Rcpp::List getSplineCoefs(int channelRange, double maxValue, double pos, double neg, double widthBasis, bool inverse);
RcppExport SEXP _flowWorkspace_getSplineCoefs(SEXP channelRangeSEXP, SEXP maxValueSEXP, SEXP posSEXP, SEXP negSEXP, SEXP widthBasisSEXP, SEXP inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type channelRange(channelRangeSEXP);
    Rcpp::traits::input_parameter< double >::type maxValue(maxValueSEXP);
    Rcpp::traits::input_parameter< double >::type pos(posSEXP);
    Rcpp::traits::input_parameter< double >::type neg(negSEXP);
    Rcpp::traits::input_parameter< double >::type widthBasis(widthBasisSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    rcpp_result_gen = Rcpp::wrap(getSplineCoefs(channelRange, maxValue, pos, neg, widthBasis, inverse));
    return rcpp_result_gen;
END_RCPP
}
// addTrans
void addTrans(Rcpp::XPtr<GatingSet> gsPtr, Rcpp::S4 transformList);
RcppExport SEXP _flowWorkspace_addTrans(SEXP gsPtrSEXP, SEXP transformListSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GatingSet> >::type gsPtr(gsPtrSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type transformList(transformListSEXP);
    addTrans(gsPtr, transformList);
    return R_NilValue;
END_RCPP
}
// updateChannels
void updateChannels(Rcpp::S4 gs, Rcpp::DataFrame map);
RcppExport SEXP _flowWorkspace_updateChannels(SEXP gsSEXP, SEXP mapSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type map(mapSEXP);
    updateChannels(gs, map);
    return R_NilValue;
END_RCPP
}
// plotGh
void plotGh(XPtr<GatingSet> gs, string sampleName, string output);
RcppExport SEXP _flowWorkspace_plotGh(SEXP gsSEXP, SEXP sampleNameSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    Rcpp::traits::input_parameter< string >::type output(outputSEXP);
    plotGh(gs, sampleName, output);
    return R_NilValue;
END_RCPP
}
// getNodes
StringVec getNodes(XPtr<GatingSet> gs, string sampleName, unsigned short order, bool fullPath, bool showHidden);
RcppExport SEXP _flowWorkspace_getNodes(SEXP gsSEXP, SEXP sampleNameSEXP, SEXP orderSEXP, SEXP fullPathSEXP, SEXP showHiddenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    Rcpp::traits::input_parameter< unsigned short >::type order(orderSEXP);
    Rcpp::traits::input_parameter< bool >::type fullPath(fullPathSEXP);
    Rcpp::traits::input_parameter< bool >::type showHidden(showHiddenSEXP);
    rcpp_result_gen = Rcpp::wrap(getNodes(gs, sampleName, order, fullPath, showHidden));
    return rcpp_result_gen;
END_RCPP
}
// getNodeID
NODEID getNodeID(XPtr<GatingSet> gs, string sampleName, string gatePath);
RcppExport SEXP _flowWorkspace_getNodeID(SEXP gsSEXP, SEXP sampleNameSEXP, SEXP gatePathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    Rcpp::traits::input_parameter< string >::type gatePath(gatePathSEXP);
    rcpp_result_gen = Rcpp::wrap(getNodeID(gs, sampleName, gatePath));
    return rcpp_result_gen;
END_RCPP
}
// getParent
NODEID getParent(XPtr<GatingSet> gs, string sampleName, string gatePath);
RcppExport SEXP _flowWorkspace_getParent(SEXP gsSEXP, SEXP sampleNameSEXP, SEXP gatePathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    Rcpp::traits::input_parameter< string >::type gatePath(gatePathSEXP);
    rcpp_result_gen = Rcpp::wrap(getParent(gs, sampleName, gatePath));
    return rcpp_result_gen;
END_RCPP
}
// getChildren
vector<NODEID> getChildren(XPtr<GatingSet> gs, string sampleName, string gatePath, bool showHidden);
RcppExport SEXP _flowWorkspace_getChildren(SEXP gsSEXP, SEXP sampleNameSEXP, SEXP gatePathSEXP, SEXP showHiddenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    Rcpp::traits::input_parameter< string >::type gatePath(gatePathSEXP);
    Rcpp::traits::input_parameter< bool >::type showHidden(showHiddenSEXP);
    rcpp_result_gen = Rcpp::wrap(getChildren(gs, sampleName, gatePath, showHidden));
    return rcpp_result_gen;
END_RCPP
}
// getPopStats
List getPopStats(XPtr<GatingSet> gs, string sampleName, string gatePath);
RcppExport SEXP _flowWorkspace_getPopStats(SEXP gsSEXP, SEXP sampleNameSEXP, SEXP gatePathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    Rcpp::traits::input_parameter< string >::type gatePath(gatePathSEXP);
    rcpp_result_gen = Rcpp::wrap(getPopStats(gs, sampleName, gatePath));
    return rcpp_result_gen;
END_RCPP
}
// getCompensation
List getCompensation(XPtr<GatingSet> gs, string sampleName);
RcppExport SEXP _flowWorkspace_getCompensation(SEXP gsSEXP, SEXP sampleNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    rcpp_result_gen = Rcpp::wrap(getCompensation(gs, sampleName));
    return rcpp_result_gen;
END_RCPP
}
// set_transformations
void set_transformations(XPtr<GatingSet> gs, string sampleName, List translist);
RcppExport SEXP _flowWorkspace_set_transformations(SEXP gsSEXP, SEXP sampleNameSEXP, SEXP translistSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    Rcpp::traits::input_parameter< List >::type translist(translistSEXP);
    set_transformations(gs, sampleName, translist);
    return R_NilValue;
END_RCPP
}
// getTransformations
List getTransformations(XPtr<GatingSet> gs, string sampleName, bool inverse);
RcppExport SEXP _flowWorkspace_getTransformations(SEXP gsSEXP, SEXP sampleNameSEXP, SEXP inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    rcpp_result_gen = Rcpp::wrap(getTransformations(gs, sampleName, inverse));
    return rcpp_result_gen;
END_RCPP
}
// getGate
List getGate(XPtr<GatingSet> gs, string sampleName, string gatePath);
RcppExport SEXP _flowWorkspace_getGate(SEXP gsSEXP, SEXP sampleNameSEXP, SEXP gatePathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    Rcpp::traits::input_parameter< string >::type gatePath(gatePathSEXP);
    rcpp_result_gen = Rcpp::wrap(getGate(gs, sampleName, gatePath));
    return rcpp_result_gen;
END_RCPP
}
// getIndices
vector<bool> getIndices(XPtr<GatingSet> gs, string sampleName, string gatePath);
RcppExport SEXP _flowWorkspace_getIndices(SEXP gsSEXP, SEXP sampleNameSEXP, SEXP gatePathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    Rcpp::traits::input_parameter< string >::type gatePath(gatePathSEXP);
    rcpp_result_gen = Rcpp::wrap(getIndices(gs, sampleName, gatePath));
    return rcpp_result_gen;
END_RCPP
}
// setIndices
void setIndices(XPtr<GatingSet> gs, string sampleName, int u, BoolVec ind);
RcppExport SEXP _flowWorkspace_setIndices(SEXP gsSEXP, SEXP sampleNameSEXP, SEXP uSEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    Rcpp::traits::input_parameter< int >::type u(uSEXP);
    Rcpp::traits::input_parameter< BoolVec >::type ind(indSEXP);
    setIndices(gs, sampleName, u, ind);
    return R_NilValue;
END_RCPP
}
// getGateFlag
bool getGateFlag(XPtr<GatingSet> gs, string sampleName, string gatePath);
RcppExport SEXP _flowWorkspace_getGateFlag(SEXP gsSEXP, SEXP sampleNameSEXP, SEXP gatePathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    Rcpp::traits::input_parameter< string >::type gatePath(gatePathSEXP);
    rcpp_result_gen = Rcpp::wrap(getGateFlag(gs, sampleName, gatePath));
    return rcpp_result_gen;
END_RCPP
}
// getNegateFlag
bool getNegateFlag(XPtr<GatingSet> gs, string sampleName, string gatePath);
RcppExport SEXP _flowWorkspace_getNegateFlag(SEXP gsSEXP, SEXP sampleNameSEXP, SEXP gatePathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    Rcpp::traits::input_parameter< string >::type gatePath(gatePathSEXP);
    rcpp_result_gen = Rcpp::wrap(getNegateFlag(gs, sampleName, gatePath));
    return rcpp_result_gen;
END_RCPP
}
// getHiddenFlag
bool getHiddenFlag(XPtr<GatingSet> gs, string sampleName, string gatePath);
RcppExport SEXP _flowWorkspace_getHiddenFlag(SEXP gsSEXP, SEXP sampleNameSEXP, SEXP gatePathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    Rcpp::traits::input_parameter< string >::type gatePath(gatePathSEXP);
    rcpp_result_gen = Rcpp::wrap(getHiddenFlag(gs, sampleName, gatePath));
    return rcpp_result_gen;
END_RCPP
}
// addGate
NODEID addGate(XPtr<GatingSet> gs, string sampleName, List filter, string gatePath, string popName);
RcppExport SEXP _flowWorkspace_addGate(SEXP gsSEXP, SEXP sampleNameSEXP, SEXP filterSEXP, SEXP gatePathSEXP, SEXP popNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    Rcpp::traits::input_parameter< List >::type filter(filterSEXP);
    Rcpp::traits::input_parameter< string >::type gatePath(gatePathSEXP);
    Rcpp::traits::input_parameter< string >::type popName(popNameSEXP);
    rcpp_result_gen = Rcpp::wrap(addGate(gs, sampleName, filter, gatePath, popName));
    return rcpp_result_gen;
END_RCPP
}
// boolGating
void boolGating(XPtr<GatingSet> gs, string sampleName, List filter, unsigned nodeID);
RcppExport SEXP _flowWorkspace_boolGating(SEXP gsSEXP, SEXP sampleNameSEXP, SEXP filterSEXP, SEXP nodeIDSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    Rcpp::traits::input_parameter< List >::type filter(filterSEXP);
    Rcpp::traits::input_parameter< unsigned >::type nodeID(nodeIDSEXP);
    boolGating(gs, sampleName, filter, nodeID);
    return R_NilValue;
END_RCPP
}
// setGate
void setGate(XPtr<GatingSet> gs, string sampleName, string gatePath, List filter);
RcppExport SEXP _flowWorkspace_setGate(SEXP gsSEXP, SEXP sampleNameSEXP, SEXP gatePathSEXP, SEXP filterSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    Rcpp::traits::input_parameter< string >::type gatePath(gatePathSEXP);
    Rcpp::traits::input_parameter< List >::type filter(filterSEXP);
    setGate(gs, sampleName, gatePath, filter);
    return R_NilValue;
END_RCPP
}
// removeNode
void removeNode(XPtr<GatingSet> gs, string sampleName, string gatePath);
RcppExport SEXP _flowWorkspace_removeNode(SEXP gsSEXP, SEXP sampleNameSEXP, SEXP gatePathSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    Rcpp::traits::input_parameter< string >::type gatePath(gatePathSEXP);
    removeNode(gs, sampleName, gatePath);
    return R_NilValue;
END_RCPP
}
// moveNode
void moveNode(Rcpp::XPtr<GatingSet> gsPtr, string sampleName, string node, string parent);
RcppExport SEXP _flowWorkspace_moveNode(SEXP gsPtrSEXP, SEXP sampleNameSEXP, SEXP nodeSEXP, SEXP parentSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GatingSet> >::type gsPtr(gsPtrSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    Rcpp::traits::input_parameter< string >::type node(nodeSEXP);
    Rcpp::traits::input_parameter< string >::type parent(parentSEXP);
    moveNode(gsPtr, sampleName, node, parent);
    return R_NilValue;
END_RCPP
}
// setNodeName
void setNodeName(XPtr<GatingSet> gs, string sampleName, string gatePath, string newNodeName);
RcppExport SEXP _flowWorkspace_setNodeName(SEXP gsSEXP, SEXP sampleNameSEXP, SEXP gatePathSEXP, SEXP newNodeNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    Rcpp::traits::input_parameter< string >::type gatePath(gatePathSEXP);
    Rcpp::traits::input_parameter< string >::type newNodeName(newNodeNameSEXP);
    setNodeName(gs, sampleName, gatePath, newNodeName);
    return R_NilValue;
END_RCPP
}
// setNodeFlag
void setNodeFlag(XPtr<GatingSet> gs, string sampleName, string gatePath, bool hidden);
RcppExport SEXP _flowWorkspace_setNodeFlag(SEXP gsSEXP, SEXP sampleNameSEXP, SEXP gatePathSEXP, SEXP hiddenSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    Rcpp::traits::input_parameter< string >::type gatePath(gatePathSEXP);
    Rcpp::traits::input_parameter< bool >::type hidden(hiddenSEXP);
    setNodeFlag(gs, sampleName, gatePath, hidden);
    return R_NilValue;
END_RCPP
}
// gs_transform_data
void gs_transform_data(XPtr<GatingSet> gsPtr);
RcppExport SEXP _flowWorkspace_gs_transform_data(SEXP gsPtrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gsPtr(gsPtrSEXP);
    gs_transform_data(gsPtr);
    return R_NilValue;
END_RCPP
}
// cpp_gating
void cpp_gating(XPtr<GatingSet> gsPtr, vector<string> nodes, bool alwaysLoadData, bool verbose, bool leafbool);
RcppExport SEXP _flowWorkspace_cpp_gating(SEXP gsPtrSEXP, SEXP nodesSEXP, SEXP alwaysLoadDataSEXP, SEXP verboseSEXP, SEXP leafboolSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gsPtr(gsPtrSEXP);
    Rcpp::traits::input_parameter< vector<string> >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< bool >::type alwaysLoadData(alwaysLoadDataSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type leafbool(leafboolSEXP);
    cpp_gating(gsPtr, nodes, alwaysLoadData, verbose, leafbool);
    return R_NilValue;
END_RCPP
}
// subset_gs_by_sample
XPtr<GatingSet> subset_gs_by_sample(XPtr<GatingSet> gsPtr, vector<string> samples);
RcppExport SEXP _flowWorkspace_subset_gs_by_sample(SEXP gsPtrSEXP, SEXP samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gsPtr(gsPtrSEXP);
    Rcpp::traits::input_parameter< vector<string> >::type samples(samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_gs_by_sample(gsPtr, samples));
    return rcpp_result_gen;
END_RCPP
}
// get_cytoset
XPtr<GatingSet> get_cytoset(XPtr<GatingSet> gsPtr);
RcppExport SEXP _flowWorkspace_get_cytoset(SEXP gsPtrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gsPtr(gsPtrSEXP);
    rcpp_result_gen = Rcpp::wrap(get_cytoset(gsPtr));
    return rcpp_result_gen;
END_RCPP
}
// get_cytoset_from_node
XPtr<GatingSet> get_cytoset_from_node(XPtr<GatingSet> gsPtr, string node);
RcppExport SEXP _flowWorkspace_get_cytoset_from_node(SEXP gsPtrSEXP, SEXP nodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gsPtr(gsPtrSEXP);
    Rcpp::traits::input_parameter< string >::type node(nodeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_cytoset_from_node(gsPtr, node));
    return rcpp_result_gen;
END_RCPP
}
// set_cytoset
void set_cytoset(XPtr<GatingSet> gsPtr, XPtr<GatingSet> cs);
RcppExport SEXP _flowWorkspace_set_cytoset(SEXP gsPtrSEXP, SEXP csSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gsPtr(gsPtrSEXP);
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type cs(csSEXP);
    set_cytoset(gsPtr, cs);
    return R_NilValue;
END_RCPP
}
// get_sample_uids
StringVec get_sample_uids(XPtr<GatingSet> gsPtr);
RcppExport SEXP _flowWorkspace_get_sample_uids(SEXP gsPtrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gsPtr(gsPtrSEXP);
    rcpp_result_gen = Rcpp::wrap(get_sample_uids(gsPtr));
    return rcpp_result_gen;
END_RCPP
}
// NewGatingSet
XPtr<GatingSet> NewGatingSet(XPtr<GatingSet> gsPtr, string src_sample_uid, XPtr<GatingSet> cs);
RcppExport SEXP _flowWorkspace_NewGatingSet(SEXP gsPtrSEXP, SEXP src_sample_uidSEXP, SEXP csSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gsPtr(gsPtrSEXP);
    Rcpp::traits::input_parameter< string >::type src_sample_uid(src_sample_uidSEXP);
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type cs(csSEXP);
    rcpp_result_gen = Rcpp::wrap(NewGatingSet(gsPtr, src_sample_uid, cs));
    return rcpp_result_gen;
END_RCPP
}
// get_gatingset_id
string get_gatingset_id(XPtr<GatingSet> gsPtr);
RcppExport SEXP _flowWorkspace_get_gatingset_id(SEXP gsPtrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gsPtr(gsPtrSEXP);
    rcpp_result_gen = Rcpp::wrap(get_gatingset_id(gsPtr));
    return rcpp_result_gen;
END_RCPP
}
// set_gatingset_id
void set_gatingset_id(XPtr<GatingSet> gsPtr, string id);
RcppExport SEXP _flowWorkspace_set_gatingset_id(SEXP gsPtrSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gsPtr(gsPtrSEXP);
    Rcpp::traits::input_parameter< string >::type id(idSEXP);
    set_gatingset_id(gsPtr, id);
    return R_NilValue;
END_RCPP
}
// save_gatingset
void save_gatingset(XPtr<GatingSet> gs, string path, string cdf);
RcppExport SEXP _flowWorkspace_save_gatingset(SEXP gsSEXP, SEXP pathSEXP, SEXP cdfSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< string >::type cdf(cdfSEXP);
    save_gatingset(gs, path, cdf);
    return R_NilValue;
END_RCPP
}
// load_gatingset
XPtr<GatingSet> load_gatingset(string path, unsigned int h5_acc_flags);
RcppExport SEXP _flowWorkspace_load_gatingset(SEXP pathSEXP, SEXP h5_acc_flagsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type h5_acc_flags(h5_acc_flagsSEXP);
    rcpp_result_gen = Rcpp::wrap(load_gatingset(path, h5_acc_flags));
    return rcpp_result_gen;
END_RCPP
}
// load_legacy_gs
XPtr<GatingSet> load_legacy_gs(string pbfile, XPtr<GatingSet> cs);
RcppExport SEXP _flowWorkspace_load_legacy_gs(SEXP pbfileSEXP, SEXP csSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< string >::type pbfile(pbfileSEXP);
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type cs(csSEXP);
    rcpp_result_gen = Rcpp::wrap(load_legacy_gs(pbfile, cs));
    return rcpp_result_gen;
END_RCPP
}
// CloneGatingSet
XPtr<GatingSet> CloneGatingSet(XPtr<GatingSet> gs, string h5_dir, bool is_copy_data);
RcppExport SEXP _flowWorkspace_CloneGatingSet(SEXP gsSEXP, SEXP h5_dirSEXP, SEXP is_copy_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type h5_dir(h5_dirSEXP);
    Rcpp::traits::input_parameter< bool >::type is_copy_data(is_copy_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(CloneGatingSet(gs, h5_dir, is_copy_data));
    return rcpp_result_gen;
END_RCPP
}
// combineGatingSet
XPtr<GatingSet> combineGatingSet(Rcpp::List gsList, Rcpp::List sampleList);
RcppExport SEXP _flowWorkspace_combineGatingSet(SEXP gsListSEXP, SEXP sampleListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type gsList(gsListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type sampleList(sampleListSEXP);
    rcpp_result_gen = Rcpp::wrap(combineGatingSet(gsList, sampleList));
    return rcpp_result_gen;
END_RCPP
}
// set_sample_uid
void set_sample_uid(XPtr<GatingSet> gs, string oldName, string newName);
RcppExport SEXP _flowWorkspace_set_sample_uid(SEXP gsSEXP, SEXP oldNameSEXP, SEXP newNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type oldName(oldNameSEXP);
    Rcpp::traits::input_parameter< string >::type newName(newNameSEXP);
    set_sample_uid(gs, oldName, newName);
    return R_NilValue;
END_RCPP
}
// getLogLevel
unsigned short getLogLevel();
RcppExport SEXP _flowWorkspace_getLogLevel() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getLogLevel());
    return rcpp_result_gen;
END_RCPP
}
// setLogLevel
void setLogLevel(unsigned short loglevel);
RcppExport SEXP _flowWorkspace_setLogLevel(SEXP loglevelSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned short >::type loglevel(loglevelSEXP);
    setLogLevel(loglevel);
    return R_NilValue;
END_RCPP
}
// toggleErrorFlag
void toggleErrorFlag();
RcppExport SEXP _flowWorkspace_toggleErrorFlag() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    toggleErrorFlag();
    return R_NilValue;
END_RCPP
}
// cf_set_readonly
void cf_set_readonly(Rcpp::XPtr<CytoFrameView> fr, bool flag);
RcppExport SEXP _flowWorkspace_cf_set_readonly(SEXP frSEXP, SEXP flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CytoFrameView> >::type fr(frSEXP);
    Rcpp::traits::input_parameter< bool >::type flag(flagSEXP);
    cf_set_readonly(fr, flag);
    return R_NilValue;
END_RCPP
}
// cf_flush_meta
void cf_flush_meta(Rcpp::XPtr<CytoFrameView> fr);
RcppExport SEXP _flowWorkspace_cf_flush_meta(SEXP frSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CytoFrameView> >::type fr(frSEXP);
    cf_flush_meta(fr);
    return R_NilValue;
END_RCPP
}
// cf_load_meta
void cf_load_meta(Rcpp::XPtr<CytoFrameView> fr);
RcppExport SEXP _flowWorkspace_cf_load_meta(SEXP frSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CytoFrameView> >::type fr(frSEXP);
    cf_load_meta(fr);
    return R_NilValue;
END_RCPP
}
// get_h5_file_path
string get_h5_file_path(Rcpp::XPtr<CytoFrameView> fr);
RcppExport SEXP _flowWorkspace_get_h5_file_path(SEXP frSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CytoFrameView> >::type fr(frSEXP);
    rcpp_result_gen = Rcpp::wrap(get_h5_file_path(fr));
    return rcpp_result_gen;
END_RCPP
}
// realize_view_cytoframe
Rcpp::XPtr<CytoFrameView> realize_view_cytoframe(Rcpp::XPtr<CytoFrameView> fr, string filename);
RcppExport SEXP _flowWorkspace_realize_view_cytoframe(SEXP frSEXP, SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CytoFrameView> >::type fr(frSEXP);
    Rcpp::traits::input_parameter< string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(realize_view_cytoframe(fr, filename));
    return rcpp_result_gen;
END_RCPP
}
// shallow_copy_cytoframe
Rcpp::XPtr<CytoFrameView> shallow_copy_cytoframe(Rcpp::XPtr<CytoFrameView> fr);
RcppExport SEXP _flowWorkspace_shallow_copy_cytoframe(SEXP frSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CytoFrameView> >::type fr(frSEXP);
    rcpp_result_gen = Rcpp::wrap(shallow_copy_cytoframe(fr));
    return rcpp_result_gen;
END_RCPP
}
// subset_cytoframe_by_rows
void subset_cytoframe_by_rows(Rcpp::XPtr<CytoFrameView> fr, vector<unsigned> idx);
RcppExport SEXP _flowWorkspace_subset_cytoframe_by_rows(SEXP frSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CytoFrameView> >::type fr(frSEXP);
    Rcpp::traits::input_parameter< vector<unsigned> >::type idx(idxSEXP);
    subset_cytoframe_by_rows(fr, idx);
    return R_NilValue;
END_RCPP
}
// subset_cytoframe_by_cols
void subset_cytoframe_by_cols(Rcpp::XPtr<CytoFrameView> fr, vector<unsigned> idx);
RcppExport SEXP _flowWorkspace_subset_cytoframe_by_cols(SEXP frSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CytoFrameView> >::type fr(frSEXP);
    Rcpp::traits::input_parameter< vector<unsigned> >::type idx(idxSEXP);
    subset_cytoframe_by_cols(fr, idx);
    return R_NilValue;
END_RCPP
}
// frm_compensate
void frm_compensate(Rcpp::XPtr<CytoFrameView> fr, NumericMatrix spillover);
RcppExport SEXP _flowWorkspace_frm_compensate(SEXP frSEXP, SEXP spilloverSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CytoFrameView> >::type fr(frSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type spillover(spilloverSEXP);
    frm_compensate(fr, spillover);
    return R_NilValue;
END_RCPP
}
// get_spillover
NumericMatrix get_spillover(Rcpp::XPtr<CytoFrameView> fr, string key);
RcppExport SEXP _flowWorkspace_get_spillover(SEXP frSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CytoFrameView> >::type fr(frSEXP);
    Rcpp::traits::input_parameter< string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(get_spillover(fr, key));
    return rcpp_result_gen;
END_RCPP
}
// writeH5
void writeH5(Rcpp::XPtr<CytoFrameView> fr, string filename);
RcppExport SEXP _flowWorkspace_writeH5(SEXP frSEXP, SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CytoFrameView> >::type fr(frSEXP);
    Rcpp::traits::input_parameter< string >::type filename(filenameSEXP);
    writeH5(fr, filename);
    return R_NilValue;
END_RCPP
}
// load_cf_from_h5
XPtr<CytoFrameView> load_cf_from_h5(string filename, bool on_disk, unsigned int flags);
RcppExport SEXP _flowWorkspace_load_cf_from_h5(SEXP filenameSEXP, SEXP on_diskSEXP, SEXP flagsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< bool >::type on_disk(on_diskSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type flags(flagsSEXP);
    rcpp_result_gen = Rcpp::wrap(load_cf_from_h5(filename, on_disk, flags));
    return rcpp_result_gen;
END_RCPP
}
// setMarker
void setMarker(Rcpp::XPtr<CytoFrameView> fr, string old, string new_name);
RcppExport SEXP _flowWorkspace_setMarker(SEXP frSEXP, SEXP oldSEXP, SEXP new_nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CytoFrameView> >::type fr(frSEXP);
    Rcpp::traits::input_parameter< string >::type old(oldSEXP);
    Rcpp::traits::input_parameter< string >::type new_name(new_nameSEXP);
    setMarker(fr, old, new_name);
    return R_NilValue;
END_RCPP
}
// setChannel
void setChannel(Rcpp::XPtr<CytoFrameView> fr, string old, string new_name);
RcppExport SEXP _flowWorkspace_setChannel(SEXP frSEXP, SEXP oldSEXP, SEXP new_nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CytoFrameView> >::type fr(frSEXP);
    Rcpp::traits::input_parameter< string >::type old(oldSEXP);
    Rcpp::traits::input_parameter< string >::type new_name(new_nameSEXP);
    setChannel(fr, old, new_name);
    return R_NilValue;
END_RCPP
}
// parseFCS
Rcpp::XPtr<CytoFrameView> parseFCS(string filename, FCS_READ_PARAM config, bool text_only, bool is_h5, string h5_filename);
RcppExport SEXP _flowWorkspace_parseFCS(SEXP filenameSEXP, SEXP configSEXP, SEXP text_onlySEXP, SEXP is_h5SEXP, SEXP h5_filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< FCS_READ_PARAM >::type config(configSEXP);
    Rcpp::traits::input_parameter< bool >::type text_only(text_onlySEXP);
    Rcpp::traits::input_parameter< bool >::type is_h5(is_h5SEXP);
    Rcpp::traits::input_parameter< string >::type h5_filename(h5_filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(parseFCS(filename, config, text_only, is_h5, h5_filename));
    return rcpp_result_gen;
END_RCPP
}
// cf_getData
NumericVector cf_getData(Rcpp::XPtr<CytoFrameView> fr);
RcppExport SEXP _flowWorkspace_cf_getData(SEXP frSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CytoFrameView> >::type fr(frSEXP);
    rcpp_result_gen = Rcpp::wrap(cf_getData(fr));
    return rcpp_result_gen;
END_RCPP
}
// cf_setData
void cf_setData(Rcpp::XPtr<CytoFrameView> fr, EVENT_DATA_VEC data);
RcppExport SEXP _flowWorkspace_cf_setData(SEXP frSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CytoFrameView> >::type fr(frSEXP);
    Rcpp::traits::input_parameter< EVENT_DATA_VEC >::type data(dataSEXP);
    cf_setData(fr, data);
    return R_NilValue;
END_RCPP
}
// cf_getKeyword
string cf_getKeyword(Rcpp::XPtr<CytoFrameView> fr, string key);
RcppExport SEXP _flowWorkspace_cf_getKeyword(SEXP frSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CytoFrameView> >::type fr(frSEXP);
    Rcpp::traits::input_parameter< string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(cf_getKeyword(fr, key));
    return rcpp_result_gen;
END_RCPP
}
// cf_getKeywords
KW_PAIR cf_getKeywords(Rcpp::XPtr<CytoFrameView> fr);
RcppExport SEXP _flowWorkspace_cf_getKeywords(SEXP frSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CytoFrameView> >::type fr(frSEXP);
    rcpp_result_gen = Rcpp::wrap(cf_getKeywords(fr));
    return rcpp_result_gen;
END_RCPP
}
// setKeywords
void setKeywords(Rcpp::XPtr<CytoFrameView> fr, List keys);
RcppExport SEXP _flowWorkspace_setKeywords(SEXP frSEXP, SEXP keysSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CytoFrameView> >::type fr(frSEXP);
    Rcpp::traits::input_parameter< List >::type keys(keysSEXP);
    setKeywords(fr, keys);
    return R_NilValue;
END_RCPP
}
// getncol
int getncol(Rcpp::XPtr<CytoFrameView> fr);
RcppExport SEXP _flowWorkspace_getncol(SEXP frSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CytoFrameView> >::type fr(frSEXP);
    rcpp_result_gen = Rcpp::wrap(getncol(fr));
    return rcpp_result_gen;
END_RCPP
}
// getnrow
int getnrow(Rcpp::XPtr<CytoFrameView> fr);
RcppExport SEXP _flowWorkspace_getnrow(SEXP frSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CytoFrameView> >::type fr(frSEXP);
    rcpp_result_gen = Rcpp::wrap(getnrow(fr));
    return rcpp_result_gen;
END_RCPP
}
// setpdata
void setpdata(Rcpp::XPtr<CytoFrameView> fr, Rcpp::DataFrame df);
RcppExport SEXP _flowWorkspace_setpdata(SEXP frSEXP, SEXP dfSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CytoFrameView> >::type fr(frSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type df(dfSEXP);
    setpdata(fr, df);
    return R_NilValue;
END_RCPP
}
// getpdata
Rcpp::DataFrame getpdata(Rcpp::XPtr<CytoFrameView> fr);
RcppExport SEXP _flowWorkspace_getpdata(SEXP frSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CytoFrameView> >::type fr(frSEXP);
    rcpp_result_gen = Rcpp::wrap(getpdata(fr));
    return rcpp_result_gen;
END_RCPP
}
// cs_set_compensation
void cs_set_compensation(Rcpp::XPtr<GatingSet> cs, List comps, bool compensate_data);
RcppExport SEXP _flowWorkspace_cs_set_compensation(SEXP csSEXP, SEXP compsSEXP, SEXP compensate_dataSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GatingSet> >::type cs(csSEXP);
    Rcpp::traits::input_parameter< List >::type comps(compsSEXP);
    Rcpp::traits::input_parameter< bool >::type compensate_data(compensate_dataSEXP);
    cs_set_compensation(cs, comps, compensate_data);
    return R_NilValue;
END_RCPP
}
// cs_set_cytoframe
void cs_set_cytoframe(Rcpp::XPtr<GatingSet> cs, string sn, Rcpp::XPtr<CytoFrameView> fr);
RcppExport SEXP _flowWorkspace_cs_set_cytoframe(SEXP csSEXP, SEXP snSEXP, SEXP frSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GatingSet> >::type cs(csSEXP);
    Rcpp::traits::input_parameter< string >::type sn(snSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<CytoFrameView> >::type fr(frSEXP);
    cs_set_cytoframe(cs, sn, fr);
    return R_NilValue;
END_RCPP
}
// cs_add_cytoframe
void cs_add_cytoframe(Rcpp::XPtr<GatingSet> cs, string sn, Rcpp::XPtr<CytoFrameView> fr);
RcppExport SEXP _flowWorkspace_cs_add_cytoframe(SEXP csSEXP, SEXP snSEXP, SEXP frSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GatingSet> >::type cs(csSEXP);
    Rcpp::traits::input_parameter< string >::type sn(snSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<CytoFrameView> >::type fr(frSEXP);
    cs_add_cytoframe(cs, sn, fr);
    return R_NilValue;
END_RCPP
}
// new_cytoset
Rcpp::XPtr<GatingSet> new_cytoset();
RcppExport SEXP _flowWorkspace_new_cytoset() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(new_cytoset());
    return rcpp_result_gen;
END_RCPP
}
// fcs_to_cytoset
Rcpp::XPtr<GatingSet> fcs_to_cytoset(vector<pair<string,string>> sample_uid_vs_file_path, FCS_READ_PARAM config, bool is_h5, string h5_dir);
RcppExport SEXP _flowWorkspace_fcs_to_cytoset(SEXP sample_uid_vs_file_pathSEXP, SEXP configSEXP, SEXP is_h5SEXP, SEXP h5_dirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vector<pair<string,string>> >::type sample_uid_vs_file_path(sample_uid_vs_file_pathSEXP);
    Rcpp::traits::input_parameter< FCS_READ_PARAM >::type config(configSEXP);
    Rcpp::traits::input_parameter< bool >::type is_h5(is_h5SEXP);
    Rcpp::traits::input_parameter< string >::type h5_dir(h5_dirSEXP);
    rcpp_result_gen = Rcpp::wrap(fcs_to_cytoset(sample_uid_vs_file_path, config, is_h5, h5_dir));
    return rcpp_result_gen;
END_RCPP
}
// get_colnames
vector<string> get_colnames(Rcpp::XPtr<GatingSet> cs);
RcppExport SEXP _flowWorkspace_get_colnames(SEXP csSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GatingSet> >::type cs(csSEXP);
    rcpp_result_gen = Rcpp::wrap(get_colnames(cs));
    return rcpp_result_gen;
END_RCPP
}
// realize_view_cytoset
Rcpp::XPtr<GatingSet> realize_view_cytoset(Rcpp::XPtr<GatingSet> cs, string path);
RcppExport SEXP _flowWorkspace_realize_view_cytoset(SEXP csSEXP, SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GatingSet> >::type cs(csSEXP);
    Rcpp::traits::input_parameter< string >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(realize_view_cytoset(cs, path));
    return rcpp_result_gen;
END_RCPP
}
// shallow_copy_cytoset
Rcpp::XPtr<GatingSet> shallow_copy_cytoset(Rcpp::XPtr<GatingSet> cs);
RcppExport SEXP _flowWorkspace_shallow_copy_cytoset(SEXP csSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GatingSet> >::type cs(csSEXP);
    rcpp_result_gen = Rcpp::wrap(shallow_copy_cytoset(cs));
    return rcpp_result_gen;
END_RCPP
}
// subset_cytoset_by_rows
void subset_cytoset_by_rows(Rcpp::XPtr<GatingSet> cs, string sn, vector<unsigned> idx);
RcppExport SEXP _flowWorkspace_subset_cytoset_by_rows(SEXP csSEXP, SEXP snSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GatingSet> >::type cs(csSEXP);
    Rcpp::traits::input_parameter< string >::type sn(snSEXP);
    Rcpp::traits::input_parameter< vector<unsigned> >::type idx(idxSEXP);
    subset_cytoset_by_rows(cs, sn, idx);
    return R_NilValue;
END_RCPP
}
// subset_cytoset
void subset_cytoset(Rcpp::XPtr<GatingSet> cs, SEXP i_obj, SEXP j_obj);
RcppExport SEXP _flowWorkspace_subset_cytoset(SEXP csSEXP, SEXP i_objSEXP, SEXP j_objSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GatingSet> >::type cs(csSEXP);
    Rcpp::traits::input_parameter< SEXP >::type i_obj(i_objSEXP);
    Rcpp::traits::input_parameter< SEXP >::type j_obj(j_objSEXP);
    subset_cytoset(cs, i_obj, j_obj);
    return R_NilValue;
END_RCPP
}
// get_cytoframe
Rcpp::XPtr<CytoFrameView> get_cytoframe(Rcpp::XPtr<GatingSet> cs, Rcpp::RObject i_obj, Rcpp::RObject j_obj);
RcppExport SEXP _flowWorkspace_get_cytoframe(SEXP csSEXP, SEXP i_objSEXP, SEXP j_objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GatingSet> >::type cs(csSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type i_obj(i_objSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type j_obj(j_objSEXP);
    rcpp_result_gen = Rcpp::wrap(get_cytoframe(cs, i_obj, j_obj));
    return rcpp_result_gen;
END_RCPP
}
// set_pheno_data
void set_pheno_data(Rcpp::XPtr<GatingSet> cs, DataFrame value);
RcppExport SEXP _flowWorkspace_set_pheno_data(SEXP csSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GatingSet> >::type cs(csSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type value(valueSEXP);
    set_pheno_data(cs, value);
    return R_NilValue;
END_RCPP
}
// get_pheno_data
List get_pheno_data(Rcpp::XPtr<GatingSet> cs);
RcppExport SEXP _flowWorkspace_get_pheno_data(SEXP csSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GatingSet> >::type cs(csSEXP);
    rcpp_result_gen = Rcpp::wrap(get_pheno_data(cs));
    return rcpp_result_gen;
END_RCPP
}
// getDescendants
VertexID_vec getDescendants(Rcpp::XPtr<GatingSet> gsPtr, string sampleName, string node);
RcppExport SEXP _flowWorkspace_getDescendants(SEXP gsPtrSEXP, SEXP sampleNameSEXP, SEXP nodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GatingSet> >::type gsPtr(gsPtrSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    Rcpp::traits::input_parameter< string >::type node(nodeSEXP);
    rcpp_result_gen = Rcpp::wrap(getDescendants(gsPtr, sampleName, node));
    return rcpp_result_gen;
END_RCPP
}
// getSingleCellExpressionByGate
NumericMatrix getSingleCellExpressionByGate(XPtr<GatingSet> gs, string sampleName, List markers_pops, NumericMatrix data, CharacterVector markers, bool threshold);
RcppExport SEXP _flowWorkspace_getSingleCellExpressionByGate(SEXP gsSEXP, SEXP sampleNameSEXP, SEXP markers_popsSEXP, SEXP dataSEXP, SEXP markersSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    Rcpp::traits::input_parameter< List >::type markers_pops(markers_popsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type markers(markersSEXP);
    Rcpp::traits::input_parameter< bool >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(getSingleCellExpressionByGate(gs, sampleName, markers_pops, data, markers, threshold));
    return rcpp_result_gen;
END_RCPP
}
// getSingleCellExpression
NumericMatrix getSingleCellExpression(XPtr<GatingSet> gs, string sampleName, vector<string> pops, NumericMatrix data, CharacterVector markers, bool threshold);
RcppExport SEXP _flowWorkspace_getSingleCellExpression(SEXP gsSEXP, SEXP sampleNameSEXP, SEXP popsSEXP, SEXP dataSEXP, SEXP markersSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<GatingSet> >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    Rcpp::traits::input_parameter< vector<string> >::type pops(popsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type markers(markersSEXP);
    Rcpp::traits::input_parameter< bool >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(getSingleCellExpression(gs, sampleName, pops, data, markers, threshold));
    return rcpp_result_gen;
END_RCPP
}
// h5_set_error_handler
void h5_set_error_handler();
RcppExport SEXP _flowWorkspace_h5_set_error_handler() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    h5_set_error_handler();
    return R_NilValue;
END_RCPP
}
// open_workspace
XPtr<flowJoWorkspace> open_workspace(string filename, int sample_name_location, int xmlParserOption);
RcppExport SEXP _flowWorkspace_open_workspace(SEXP filenameSEXP, SEXP sample_name_locationSEXP, SEXP xmlParserOptionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< int >::type sample_name_location(sample_name_locationSEXP);
    Rcpp::traits::input_parameter< int >::type xmlParserOption(xmlParserOptionSEXP);
    rcpp_result_gen = Rcpp::wrap(open_workspace(filename, sample_name_location, xmlParserOption));
    return rcpp_result_gen;
END_RCPP
}
// parse_workspace
XPtr<GatingSet> parse_workspace(XPtr<flowJoWorkspace> ws, int group_id, List subset, bool execute, string path, string h5_dir, bool includeGates, vector<string> additional_keys, bool additional_sampleID, vector<string> keywords, bool is_pheno_data_from_FCS, bool keyword_ignore_case, float extend_val, float extend_to, bool channel_ignore_case, bool leaf_bool, List comps, bool transform, string fcs_file_extension, FCS_READ_PARAM fcs_parse_arg, int num_threads);
RcppExport SEXP _flowWorkspace_parse_workspace(SEXP wsSEXP, SEXP group_idSEXP, SEXP subsetSEXP, SEXP executeSEXP, SEXP pathSEXP, SEXP h5_dirSEXP, SEXP includeGatesSEXP, SEXP additional_keysSEXP, SEXP additional_sampleIDSEXP, SEXP keywordsSEXP, SEXP is_pheno_data_from_FCSSEXP, SEXP keyword_ignore_caseSEXP, SEXP extend_valSEXP, SEXP extend_toSEXP, SEXP channel_ignore_caseSEXP, SEXP leaf_boolSEXP, SEXP compsSEXP, SEXP transformSEXP, SEXP fcs_file_extensionSEXP, SEXP fcs_parse_argSEXP, SEXP num_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<flowJoWorkspace> >::type ws(wsSEXP);
    Rcpp::traits::input_parameter< int >::type group_id(group_idSEXP);
    Rcpp::traits::input_parameter< List >::type subset(subsetSEXP);
    Rcpp::traits::input_parameter< bool >::type execute(executeSEXP);
    Rcpp::traits::input_parameter< string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< string >::type h5_dir(h5_dirSEXP);
    Rcpp::traits::input_parameter< bool >::type includeGates(includeGatesSEXP);
    Rcpp::traits::input_parameter< vector<string> >::type additional_keys(additional_keysSEXP);
    Rcpp::traits::input_parameter< bool >::type additional_sampleID(additional_sampleIDSEXP);
    Rcpp::traits::input_parameter< vector<string> >::type keywords(keywordsSEXP);
    Rcpp::traits::input_parameter< bool >::type is_pheno_data_from_FCS(is_pheno_data_from_FCSSEXP);
    Rcpp::traits::input_parameter< bool >::type keyword_ignore_case(keyword_ignore_caseSEXP);
    Rcpp::traits::input_parameter< float >::type extend_val(extend_valSEXP);
    Rcpp::traits::input_parameter< float >::type extend_to(extend_toSEXP);
    Rcpp::traits::input_parameter< bool >::type channel_ignore_case(channel_ignore_caseSEXP);
    Rcpp::traits::input_parameter< bool >::type leaf_bool(leaf_boolSEXP);
    Rcpp::traits::input_parameter< List >::type comps(compsSEXP);
    Rcpp::traits::input_parameter< bool >::type transform(transformSEXP);
    Rcpp::traits::input_parameter< string >::type fcs_file_extension(fcs_file_extensionSEXP);
    Rcpp::traits::input_parameter< FCS_READ_PARAM >::type fcs_parse_arg(fcs_parse_argSEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(parse_workspace(ws, group_id, subset, execute, path, h5_dir, includeGates, additional_keys, additional_sampleID, keywords, is_pheno_data_from_FCS, keyword_ignore_case, extend_val, extend_to, channel_ignore_case, leaf_bool, comps, transform, fcs_file_extension, fcs_parse_arg, num_threads));
    return rcpp_result_gen;
END_RCPP
}
// get_keywords_by_id
KW_PAIR get_keywords_by_id(XPtr<flowJoWorkspace> ws, int sample_id);
RcppExport SEXP _flowWorkspace_get_keywords_by_id(SEXP wsSEXP, SEXP sample_idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<flowJoWorkspace> >::type ws(wsSEXP);
    Rcpp::traits::input_parameter< int >::type sample_id(sample_idSEXP);
    rcpp_result_gen = Rcpp::wrap(get_keywords_by_id(ws, sample_id));
    return rcpp_result_gen;
END_RCPP
}
// get_keywords_by_name
KW_PAIR get_keywords_by_name(XPtr<flowJoWorkspace> ws, string sample_name);
RcppExport SEXP _flowWorkspace_get_keywords_by_name(SEXP wsSEXP, SEXP sample_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<flowJoWorkspace> >::type ws(wsSEXP);
    Rcpp::traits::input_parameter< string >::type sample_name(sample_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(get_keywords_by_name(ws, sample_name));
    return rcpp_result_gen;
END_RCPP
}
// get_sample_groups
List get_sample_groups(XPtr<flowJoWorkspace> ws);
RcppExport SEXP _flowWorkspace_get_sample_groups(SEXP wsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<flowJoWorkspace> >::type ws(wsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_sample_groups(ws));
    return rcpp_result_gen;
END_RCPP
}
// get_samples
List get_samples(XPtr<flowJoWorkspace> ws);
RcppExport SEXP _flowWorkspace_get_samples(SEXP wsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<flowJoWorkspace> >::type ws(wsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_samples(ws));
    return rcpp_result_gen;
END_RCPP
}
// get_xml_file_path
string get_xml_file_path(XPtr<flowJoWorkspace> ws);
RcppExport SEXP _flowWorkspace_get_xml_file_path(SEXP wsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<flowJoWorkspace> >::type ws(wsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_xml_file_path(ws));
    return rcpp_result_gen;
END_RCPP
}
// setCounts
void setCounts(Rcpp::XPtr<GatingSet> gsPtr, string sampleName, string node, int count);
RcppExport SEXP _flowWorkspace_setCounts(SEXP gsPtrSEXP, SEXP sampleNameSEXP, SEXP nodeSEXP, SEXP countSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GatingSet> >::type gsPtr(gsPtrSEXP);
    Rcpp::traits::input_parameter< string >::type sampleName(sampleNameSEXP);
    Rcpp::traits::input_parameter< string >::type node(nodeSEXP);
    Rcpp::traits::input_parameter< int >::type count(countSEXP);
    setCounts(gsPtr, sampleName, node, count);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_flowWorkspace_getPopCounts", (DL_FUNC) &_flowWorkspace_getPopCounts, 4},
    {"_flowWorkspace_getSplineCoefs", (DL_FUNC) &_flowWorkspace_getSplineCoefs, 6},
    {"_flowWorkspace_addTrans", (DL_FUNC) &_flowWorkspace_addTrans, 2},
    {"_flowWorkspace_updateChannels", (DL_FUNC) &_flowWorkspace_updateChannels, 2},
    {"_flowWorkspace_plotGh", (DL_FUNC) &_flowWorkspace_plotGh, 3},
    {"_flowWorkspace_getNodes", (DL_FUNC) &_flowWorkspace_getNodes, 5},
    {"_flowWorkspace_getNodeID", (DL_FUNC) &_flowWorkspace_getNodeID, 3},
    {"_flowWorkspace_getParent", (DL_FUNC) &_flowWorkspace_getParent, 3},
    {"_flowWorkspace_getChildren", (DL_FUNC) &_flowWorkspace_getChildren, 4},
    {"_flowWorkspace_getPopStats", (DL_FUNC) &_flowWorkspace_getPopStats, 3},
    {"_flowWorkspace_getCompensation", (DL_FUNC) &_flowWorkspace_getCompensation, 2},
    {"_flowWorkspace_set_transformations", (DL_FUNC) &_flowWorkspace_set_transformations, 3},
    {"_flowWorkspace_getTransformations", (DL_FUNC) &_flowWorkspace_getTransformations, 3},
    {"_flowWorkspace_getGate", (DL_FUNC) &_flowWorkspace_getGate, 3},
    {"_flowWorkspace_getIndices", (DL_FUNC) &_flowWorkspace_getIndices, 3},
    {"_flowWorkspace_setIndices", (DL_FUNC) &_flowWorkspace_setIndices, 4},
    {"_flowWorkspace_getGateFlag", (DL_FUNC) &_flowWorkspace_getGateFlag, 3},
    {"_flowWorkspace_getNegateFlag", (DL_FUNC) &_flowWorkspace_getNegateFlag, 3},
    {"_flowWorkspace_getHiddenFlag", (DL_FUNC) &_flowWorkspace_getHiddenFlag, 3},
    {"_flowWorkspace_addGate", (DL_FUNC) &_flowWorkspace_addGate, 5},
    {"_flowWorkspace_boolGating", (DL_FUNC) &_flowWorkspace_boolGating, 4},
    {"_flowWorkspace_setGate", (DL_FUNC) &_flowWorkspace_setGate, 4},
    {"_flowWorkspace_removeNode", (DL_FUNC) &_flowWorkspace_removeNode, 3},
    {"_flowWorkspace_moveNode", (DL_FUNC) &_flowWorkspace_moveNode, 4},
    {"_flowWorkspace_setNodeName", (DL_FUNC) &_flowWorkspace_setNodeName, 4},
    {"_flowWorkspace_setNodeFlag", (DL_FUNC) &_flowWorkspace_setNodeFlag, 4},
    {"_flowWorkspace_gs_transform_data", (DL_FUNC) &_flowWorkspace_gs_transform_data, 1},
    {"_flowWorkspace_cpp_gating", (DL_FUNC) &_flowWorkspace_cpp_gating, 5},
    {"_flowWorkspace_subset_gs_by_sample", (DL_FUNC) &_flowWorkspace_subset_gs_by_sample, 2},
    {"_flowWorkspace_get_cytoset", (DL_FUNC) &_flowWorkspace_get_cytoset, 1},
    {"_flowWorkspace_get_cytoset_from_node", (DL_FUNC) &_flowWorkspace_get_cytoset_from_node, 2},
    {"_flowWorkspace_set_cytoset", (DL_FUNC) &_flowWorkspace_set_cytoset, 2},
    {"_flowWorkspace_get_sample_uids", (DL_FUNC) &_flowWorkspace_get_sample_uids, 1},
    {"_flowWorkspace_NewGatingSet", (DL_FUNC) &_flowWorkspace_NewGatingSet, 3},
    {"_flowWorkspace_get_gatingset_id", (DL_FUNC) &_flowWorkspace_get_gatingset_id, 1},
    {"_flowWorkspace_set_gatingset_id", (DL_FUNC) &_flowWorkspace_set_gatingset_id, 2},
    {"_flowWorkspace_save_gatingset", (DL_FUNC) &_flowWorkspace_save_gatingset, 3},
    {"_flowWorkspace_load_gatingset", (DL_FUNC) &_flowWorkspace_load_gatingset, 2},
    {"_flowWorkspace_load_legacy_gs", (DL_FUNC) &_flowWorkspace_load_legacy_gs, 2},
    {"_flowWorkspace_CloneGatingSet", (DL_FUNC) &_flowWorkspace_CloneGatingSet, 3},
    {"_flowWorkspace_combineGatingSet", (DL_FUNC) &_flowWorkspace_combineGatingSet, 2},
    {"_flowWorkspace_set_sample_uid", (DL_FUNC) &_flowWorkspace_set_sample_uid, 3},
    {"_flowWorkspace_getLogLevel", (DL_FUNC) &_flowWorkspace_getLogLevel, 0},
    {"_flowWorkspace_setLogLevel", (DL_FUNC) &_flowWorkspace_setLogLevel, 1},
    {"_flowWorkspace_toggleErrorFlag", (DL_FUNC) &_flowWorkspace_toggleErrorFlag, 0},
    {"_flowWorkspace_cf_set_readonly", (DL_FUNC) &_flowWorkspace_cf_set_readonly, 2},
    {"_flowWorkspace_cf_flush_meta", (DL_FUNC) &_flowWorkspace_cf_flush_meta, 1},
    {"_flowWorkspace_cf_load_meta", (DL_FUNC) &_flowWorkspace_cf_load_meta, 1},
    {"_flowWorkspace_get_h5_file_path", (DL_FUNC) &_flowWorkspace_get_h5_file_path, 1},
    {"_flowWorkspace_realize_view_cytoframe", (DL_FUNC) &_flowWorkspace_realize_view_cytoframe, 2},
    {"_flowWorkspace_shallow_copy_cytoframe", (DL_FUNC) &_flowWorkspace_shallow_copy_cytoframe, 1},
    {"_flowWorkspace_subset_cytoframe_by_rows", (DL_FUNC) &_flowWorkspace_subset_cytoframe_by_rows, 2},
    {"_flowWorkspace_subset_cytoframe_by_cols", (DL_FUNC) &_flowWorkspace_subset_cytoframe_by_cols, 2},
    {"_flowWorkspace_frm_compensate", (DL_FUNC) &_flowWorkspace_frm_compensate, 2},
    {"_flowWorkspace_get_spillover", (DL_FUNC) &_flowWorkspace_get_spillover, 2},
    {"_flowWorkspace_writeH5", (DL_FUNC) &_flowWorkspace_writeH5, 2},
    {"_flowWorkspace_load_cf_from_h5", (DL_FUNC) &_flowWorkspace_load_cf_from_h5, 3},
    {"_flowWorkspace_setMarker", (DL_FUNC) &_flowWorkspace_setMarker, 3},
    {"_flowWorkspace_setChannel", (DL_FUNC) &_flowWorkspace_setChannel, 3},
    {"_flowWorkspace_parseFCS", (DL_FUNC) &_flowWorkspace_parseFCS, 5},
    {"_flowWorkspace_cf_getData", (DL_FUNC) &_flowWorkspace_cf_getData, 1},
    {"_flowWorkspace_cf_setData", (DL_FUNC) &_flowWorkspace_cf_setData, 2},
    {"_flowWorkspace_cf_getKeyword", (DL_FUNC) &_flowWorkspace_cf_getKeyword, 2},
    {"_flowWorkspace_cf_getKeywords", (DL_FUNC) &_flowWorkspace_cf_getKeywords, 1},
    {"_flowWorkspace_setKeywords", (DL_FUNC) &_flowWorkspace_setKeywords, 2},
    {"_flowWorkspace_getncol", (DL_FUNC) &_flowWorkspace_getncol, 1},
    {"_flowWorkspace_getnrow", (DL_FUNC) &_flowWorkspace_getnrow, 1},
    {"_flowWorkspace_setpdata", (DL_FUNC) &_flowWorkspace_setpdata, 2},
    {"_flowWorkspace_getpdata", (DL_FUNC) &_flowWorkspace_getpdata, 1},
    {"_flowWorkspace_cs_set_compensation", (DL_FUNC) &_flowWorkspace_cs_set_compensation, 3},
    {"_flowWorkspace_cs_set_cytoframe", (DL_FUNC) &_flowWorkspace_cs_set_cytoframe, 3},
    {"_flowWorkspace_cs_add_cytoframe", (DL_FUNC) &_flowWorkspace_cs_add_cytoframe, 3},
    {"_flowWorkspace_new_cytoset", (DL_FUNC) &_flowWorkspace_new_cytoset, 0},
    {"_flowWorkspace_fcs_to_cytoset", (DL_FUNC) &_flowWorkspace_fcs_to_cytoset, 4},
    {"_flowWorkspace_get_colnames", (DL_FUNC) &_flowWorkspace_get_colnames, 1},
    {"_flowWorkspace_realize_view_cytoset", (DL_FUNC) &_flowWorkspace_realize_view_cytoset, 2},
    {"_flowWorkspace_shallow_copy_cytoset", (DL_FUNC) &_flowWorkspace_shallow_copy_cytoset, 1},
    {"_flowWorkspace_subset_cytoset_by_rows", (DL_FUNC) &_flowWorkspace_subset_cytoset_by_rows, 3},
    {"_flowWorkspace_subset_cytoset", (DL_FUNC) &_flowWorkspace_subset_cytoset, 3},
    {"_flowWorkspace_get_cytoframe", (DL_FUNC) &_flowWorkspace_get_cytoframe, 3},
    {"_flowWorkspace_set_pheno_data", (DL_FUNC) &_flowWorkspace_set_pheno_data, 2},
    {"_flowWorkspace_get_pheno_data", (DL_FUNC) &_flowWorkspace_get_pheno_data, 1},
    {"_flowWorkspace_getDescendants", (DL_FUNC) &_flowWorkspace_getDescendants, 3},
    {"_flowWorkspace_getSingleCellExpressionByGate", (DL_FUNC) &_flowWorkspace_getSingleCellExpressionByGate, 6},
    {"_flowWorkspace_getSingleCellExpression", (DL_FUNC) &_flowWorkspace_getSingleCellExpression, 6},
    {"_flowWorkspace_h5_set_error_handler", (DL_FUNC) &_flowWorkspace_h5_set_error_handler, 0},
    {"_flowWorkspace_open_workspace", (DL_FUNC) &_flowWorkspace_open_workspace, 3},
    {"_flowWorkspace_parse_workspace", (DL_FUNC) &_flowWorkspace_parse_workspace, 21},
    {"_flowWorkspace_get_keywords_by_id", (DL_FUNC) &_flowWorkspace_get_keywords_by_id, 2},
    {"_flowWorkspace_get_keywords_by_name", (DL_FUNC) &_flowWorkspace_get_keywords_by_name, 2},
    {"_flowWorkspace_get_sample_groups", (DL_FUNC) &_flowWorkspace_get_sample_groups, 1},
    {"_flowWorkspace_get_samples", (DL_FUNC) &_flowWorkspace_get_samples, 1},
    {"_flowWorkspace_get_xml_file_path", (DL_FUNC) &_flowWorkspace_get_xml_file_path, 1},
    {"_flowWorkspace_setCounts", (DL_FUNC) &_flowWorkspace_setCounts, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_flowWorkspace(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "include/R_GatingSet.hpp"

using namespace Rcpp;

// getPopCounts
Rcpp::List getPopCounts(Rcpp::XPtr<GatingSet> gsPtr, StringVec sampleNames, StringVec subpopulation, bool flowJo, bool isFullPath);
RcppExport SEXP flowWorkspace_getPopCounts(SEXP gsPtrSEXP, SEXP sampleNamesSEXP, SEXP subpopulationSEXP, SEXP flowJoSEXP, SEXP isFullPathSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::XPtr<GatingSet> >::type gsPtr(gsPtrSEXP );
        Rcpp::traits::input_parameter< StringVec >::type sampleNames(sampleNamesSEXP );
        Rcpp::traits::input_parameter< StringVec >::type subpopulation(subpopulationSEXP );
        Rcpp::traits::input_parameter< bool >::type flowJo(flowJoSEXP );
        Rcpp::traits::input_parameter< bool >::type isFullPath(isFullPathSEXP );
        Rcpp::List __result = getPopCounts(gsPtr, sampleNames, subpopulation, flowJo, isFullPath);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// getSplineCoefs
Rcpp::List getSplineCoefs(int channelRange = 4096, double maxValue = 262144, double pos = 4.5, double neg = 0, double widthBasis = -10);
RcppExport SEXP flowWorkspace_getSplineCoefs(SEXP channelRangeSEXP, SEXP maxValueSEXP, SEXP posSEXP, SEXP negSEXP, SEXP widthBasisSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type channelRange(channelRangeSEXP );
        Rcpp::traits::input_parameter< double >::type maxValue(maxValueSEXP );
        Rcpp::traits::input_parameter< double >::type pos(posSEXP );
        Rcpp::traits::input_parameter< double >::type neg(negSEXP );
        Rcpp::traits::input_parameter< double >::type widthBasis(widthBasisSEXP );
        Rcpp::List __result = getSplineCoefs(channelRange, maxValue, pos, neg, widthBasis);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// addTrans
void addTrans(Rcpp::XPtr<GatingSet> gsPtr, Rcpp::S4 transformList);
RcppExport SEXP flowWorkspace_addTrans(SEXP gsPtrSEXP, SEXP transformListSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::XPtr<GatingSet> >::type gsPtr(gsPtrSEXP );
        Rcpp::traits::input_parameter< Rcpp::S4 >::type transformList(transformListSEXP );
        addTrans(gsPtr, transformList);
    }
    return R_NilValue;
END_RCPP
}
